%!PS-Adobe-2.0 EPSF-2.0
%%BoundingBox: 42 35 487 330
%%HiResBoundingBox: 42.000000 35.000000 487.000000 330.000000
%%Creator: Box::print() by Christian Lindig
%%EndComments
% EPSF created by ps2eps 1.68
%%BeginProlog
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
gsave
33 359 translate
1 -1 scale
% $Id$
% Header for DDD PostScript Box output
% Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
% Written by Christian Lindig <lindig@ips.cs.tu-bs.de>.
% 
% This file is part of DDD.
% 
% DDD is free software; you can redistribute it and/or
% modify it under the terms of the GNU General Public
% License as published by the Free Software Foundation; either
% version 3 of the License, or (at your option) any later version.
% 
% DDD is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public
% License along with DDD -- see the file COPYING.
% If not, see <http://www.gnu.org/licenses/>.
% 
% DDD is the data display debugger.
% For details, see the DDD World-Wide-Web page, 
% `http://www.gnu.org/software/ddd/',
% or send a mail to the DDD developers <ddd@gnu.org>.
% Make all definitions local to the ddddict dictionary
/ddddict 25 dict def 
ddddict begin		% make dict active 
% Global variables
/fontSize+ 12 def
/font+ /Courier def  
% Some small utilities
/cm { 28.34646 mul } bind def
% ISOLATIN1* - reencode a font to ISO Latin 1 encoding
%
% newfont table oldfont isolatin1*
/isolatin1* {
	findfont
	dup maxlength dict begin
	{
		1 index /FID ne { def } { pop pop } ifelse
	} forall
	/Encoding exch def
	dup /FontName exch def
	currentdict end definefont pop
} bind def
% Define the ISO Latin 1 encoding of a font
 
/isotable[
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/space/exclam/quotedbl/numbersign
/dollar/percent/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma
/hyphen/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S
/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar
/braceright/asciitilde/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis
/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron/.notdef/exclamdown/cent
/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guilsinglleft/logicalnot/hyphen/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve
/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex
/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute
/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis
/divide/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def
% YCORRECT*
% The reference point of a string ist NOT its lower left corner but 
% its baseline.  Therefore, the y coordinate must be corrected.  
% Returns the correction for the current font.
%
% ycorrect* y
/ycorrect* {
	currentfont /FontBBox get
	aload pop pop pop
	currentfont /FontMatrix get dtransform
	exch pop
} def 
% TEXT*
% print out a string and make sure not to require more space than
% specified.
% font xsize ysize xorigin yorigin (string) text*
/text* {
	/string+ exch def		% set up some variables ..
	moveto				% move to (xorigin,yorigin)
	/ysize+ exch def
	/xsize+ exch def
	/thefont+ exch def
	% is the right font already selected ?
	thefont+ font+ ne 
	ysize+ fontSize+ ne
	or {	
		% set up the right font - reencode it	
		
		/Symbol thefont+ eq 
		{
			thefont+ findfont
		}{
			/isofont+ isotable thefont+ isolatin1*	
			/isofont+ findfont
		}ifelse
		[ysize+ 0 0 ysize+ neg 0 0] makefont
		setfont
		
		/font+ thefont+ def
		/fontSize+ ysize+ def
	} if
	% correct current point 
	0 ycorrect* neg rmoveto
	% string too long?  Scale it down ...
	% The actual font is scaled. There is a good chance,
	% that this will not happen too often when the font is not
	% changed during the calls of text*
	xsize+ string+ stringwidth pop div dup dup
	1 lt {
		0 0 1 0 0 6 array astore currentfont exch 
		makefont setfont
		pop
	}{ 
		% string is too short ... scale it up
		1.05 gt {
			0 0 1 0 0 6 array astore currentfont exch 
			makefont setfont	
		}{
			pop
		} ifelse
	} ifelse
	
	string+ show
} bind def
	
% ARROWLINE*
% Draw a line of given width with an arrow at its end
% len gives the height of the triangle forming the head of the arrow
% and angle the angle at its top
%	
% angle len  x1 y1 x2 y2 linewidth arrowline*
/arrowline* {
	setlinewidth			% angle len x1 y1 x2 y2
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/len+ exch def			% height of triangle
	/alpha+ 
		y2 y1 sub		% define alpha+
		x2 x1 sub
		atan
	def
	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def  
	
	newpath				% draw the line
	x1 y1 moveto 
	x2 len+ alpha+ cos mul sub 	% shorten the line to the end  
	y2 len+ alpha+ sin mul sub 	% of the triangle
	lineto
	stroke		
	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x2 y2 
	translate			% origin now at x2 y2
	alpha+ 90 sub rotate 		% rotate the system
	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def
% ARROWHEAD*
% draw an arrow head inclined by alpha at (x,y)
%
% angle len alpha x y
/arrowhead* {
	/y exch def
	/x exch def
	/alpha+ exch def
	/len+ exch def			% height of triangle
	/base+				% define half of baseline
		exch 
		2 div dup		% angle angle
		sin exch cos 	 	% sin(angle) cos(angle)
		div			% tan(angle)
		len+
		mul			% half of baseline
	def
	gsave				% set the origin to the head of
	0 setlinewidth			% the arrow and rotate the system
	x y 
	translate			% origin now at x y
	alpha+ 90 sub rotate 		% rotate the system
	newpath				% draw a triangle
	0 0 moveto
	base+ len+ neg rlineto
	base+ 2 mul neg 0 rlineto
	closepath
	fill
	
	grestore
} bind def
% LINE*
% draw a line of given width from (x1,y1) to (x2,y2)
%
% x1 y1 x2 y2 width line*
/line* {
	setlinewidth	% x1 y1 x2 y2
	newpath
	4 2 roll 	% x2 y2 x1 y1
	moveto		% x2 y2
	lineto		
	stroke
} bind def
% CLEAN*
%
% fill a box given by four points with white colour ..
% x1 y1 x2 y2 x3 y3 x4 y4 clean*
/clean* {
	gsave
	1 setgray
	0 setlinewidth
	newpath
	moveto  lineto  lineto lineto
	closepath
	fill
	grestore
} bind def
% BOX*
% fill a box given by four points
%
% x1 y1 x2 y2 x3 y3 x4 y4 box*
/box* {
	0 setlinewidth
	newpath
	moveto 	lineto 	lineto lineto
	closepath
	fill
} bind def
% ARC*
% draw an ellipse with center (cx,cy), radius dx dy, starting at start
% and ending at end.
%
% start end dx dy cx cy width arc*
/arc* {
	gsave
	setlinewidth
	translate
	newpath
	dup 3 1 roll		% start end dy dx dy
	div 1 scale		% dy dx/dy 1 scale => start end dy
	
	0 exch  0 exch		% start end 0 0 dy 
	5 -2 roll 		% 0 0 dy start end
	dup
	0 eq {			% replace 0 by 360
		pop 
		360
	} if
	arc
	stroke
	grestore
} bind def
% BEGINCOLOR* / ENDCOLOR*
% Draw something using a specific foreground color
%
% red green blue begincolor* SOMETHING endcolor*
/begincolor* {
        currentrgbcolor         % red green blue red' green' blue'
        6 3 roll                % red' green' blue' red green blue
	setrgbcolor             % red' green' blue'
} bind def
/endcolor* {
	setrgbcolor
} bind def
% Set up the right font to the right size
/isofont+ isotable font+ isolatin1* 	% reencode font+
					% and make it the current font
/isofont+ findfont
[fontSize+ 0 0 fontSize+ neg 0 0] makefont
setfont
%%EndProlog
30 10 247 48 282 48 1 arrowline*
/Helvetica-Narrow 9 11 260 46 (*\(\)) text*
30 10 247 176 282 176 1 arrowline*
/Helvetica-Narrow 9 11 260 174 (*\(\)) text*
30 10 210 304 282 304 1 arrowline*
/Helvetica-Narrow 9 11 242 302 (*\(\)) text*
9 30 247 30 247 66 9 66 clean*
9 30 246 30 246 31 9 31 box* %(9, 30)(237, 1)
9 31 10 31 10 64 9 64 box* %(9, 31)(1, 33)
/Courier 7 13 12 46 (1) text*
/Courier 14 13 19 46 (: ) text*
/Courier-BoldOblique 21 13 33 46 (&s1) text*
12 46 243 46 243 47 12 47 box* %(12, 46)(231, 1)
/Courier 231 13 12 62 (\(struct Student *\) 0x7fffffffdd90) text*
245 31 246 31 246 64 245 64 box* %(245, 31)(1, 33)
9 64 246 64 246 65 9 65 box* %(9, 64)(237, 1)
246 31 247 31 247 65 246 65 box* %(246, 31)(1, 34)
10 65 247 65 247 66 10 66 box* %(10, 65)(237, 1)
282 29 454 29 454 68 282 68 clean*
282 29 453 29 453 30 282 30 box* %(282, 29)(171, 1)
282 30 283 30 283 66 282 66 box* %(282, 30)(1, 36)
285 32 450 32 450 33 285 33 box* %(285, 32)(165, 1)
285 33 286 33 286 63 285 63 box* %(285, 33)(1, 30)
/Courier 28 13 300 48 (name) text*
/Courier 21 13 328 48 ( = ) text*
/Courier 98 13 349 48 (0x402020 \"ann\") text*
/Courier 21 13 300 61 (age) text*
/Courier 21 13 328 61 ( = ) text*
/Courier 14 13 349 61 (21) text*
449 33 450 33 450 63 449 63 box* %(449, 33)(1, 30)
285 63 450 63 450 64 285 64 box* %(285, 63)(165, 1)
452 30 453 30 453 66 452 66 box* %(452, 30)(1, 36)
282 66 453 66 453 67 282 67 box* %(282, 66)(171, 1)
453 30 454 30 454 67 453 67 box* %(453, 30)(1, 37)
283 67 454 67 454 68 283 68 box* %(283, 67)(171, 1)
10 85 182 85 182 140 10 140 clean*
10 85 181 85 181 86 10 86 box* %(10, 85)(171, 1)
10 86 11 86 11 138 10 138 box* %(10, 86)(1, 52)
/Courier 7 13 13 101 (3) text*
/Courier 14 13 20 101 (: ) text*
/Courier-BoldOblique 14 13 34 101 (s1) text*
13 101 178 101 178 102 13 102 box* %(13, 101)(165, 1)
13 104 178 104 178 105 13 105 box* %(13, 104)(165, 1)
13 105 14 105 14 135 13 135 box* %(13, 105)(1, 30)
/Courier 28 13 28 120 (name) text*
/Courier 21 13 56 120 ( = ) text*
/Courier 98 13 77 120 (0x402020 \"ann\") text*
/Courier 21 13 28 133 (age) text*
/Courier 21 13 56 133 ( = ) text*
/Courier 14 13 77 133 (21) text*
177 105 178 105 178 135 177 135 box* %(177, 105)(1, 30)
13 135 178 135 178 136 13 136 box* %(13, 135)(165, 1)
180 86 181 86 181 138 180 138 box* %(180, 86)(1, 52)
10 138 181 138 181 139 10 139 box* %(10, 138)(171, 1)
181 86 182 86 182 139 181 139 box* %(181, 86)(1, 53)
11 139 182 139 182 140 11 140 box* %(11, 139)(171, 1)
9 158 247 158 247 194 9 194 clean*
9 158 246 158 246 159 9 159 box* %(9, 158)(237, 1)
9 159 10 159 10 192 9 192 box* %(9, 159)(1, 33)
/Courier 7 13 12 174 (4) text*
/Courier 14 13 19 174 (: ) text*
/Courier-BoldOblique 21 13 33 174 (&s2) text*
12 174 243 174 243 175 12 175 box* %(12, 174)(231, 1)
/Courier 231 13 12 190 (\(struct Student *\) 0x7fffffffdd80) text*
245 159 246 159 246 192 245 192 box* %(245, 159)(1, 33)
9 192 246 192 246 193 9 193 box* %(9, 192)(237, 1)
246 159 247 159 247 193 246 193 box* %(246, 159)(1, 34)
10 193 247 193 247 194 10 194 box* %(10, 193)(237, 1)
282 157 454 157 454 196 282 196 clean*
282 157 453 157 453 158 282 158 box* %(282, 157)(171, 1)
282 158 283 158 283 194 282 194 box* %(282, 158)(1, 36)
285 160 450 160 450 161 285 161 box* %(285, 160)(165, 1)
285 161 286 161 286 191 285 191 box* %(285, 161)(1, 30)
/Courier 28 13 300 176 (name) text*
/Courier 21 13 328 176 ( = ) text*
/Courier 98 13 349 176 (0x402024 \"bob\") text*
/Courier 21 13 300 189 (age) text*
/Courier 21 13 328 189 ( = ) text*
/Courier 14 13 349 189 (22) text*
449 161 450 161 450 191 449 191 box* %(449, 161)(1, 30)
285 191 450 191 450 192 285 192 box* %(285, 191)(165, 1)
452 158 453 158 453 194 452 194 box* %(452, 158)(1, 36)
282 194 453 194 453 195 282 195 box* %(282, 194)(171, 1)
453 158 454 158 454 195 453 195 box* %(453, 158)(1, 37)
283 195 454 195 454 196 283 196 box* %(283, 195)(171, 1)
10 213 182 213 182 268 10 268 clean*
10 213 181 213 181 214 10 214 box* %(10, 213)(171, 1)
10 214 11 214 11 266 10 266 box* %(10, 214)(1, 52)
/Courier 7 13 13 229 (6) text*
/Courier 14 13 20 229 (: ) text*
/Courier-BoldOblique 14 13 34 229 (s2) text*
13 229 178 229 178 230 13 230 box* %(13, 229)(165, 1)
13 232 178 232 178 233 13 233 box* %(13, 232)(165, 1)
13 233 14 233 14 263 13 263 box* %(13, 233)(1, 30)
/Courier 28 13 28 248 (name) text*
/Courier 21 13 56 248 ( = ) text*
/Courier 98 13 77 248 (0x402024 \"bob\") text*
/Courier 21 13 28 261 (age) text*
/Courier 21 13 56 261 ( = ) text*
/Courier 14 13 77 261 (22) text*
177 233 178 233 178 263 177 263 box* %(177, 233)(1, 30)
13 263 178 263 178 264 13 264 box* %(13, 263)(165, 1)
180 214 181 214 181 266 180 266 box* %(180, 214)(1, 52)
10 266 181 266 181 267 10 267 box* %(10, 266)(171, 1)
181 214 182 214 182 267 181 267 box* %(181, 214)(1, 53)
11 267 182 267 182 268 11 268 box* %(11, 267)(171, 1)
14 286 210 286 210 322 14 322 clean*
14 286 209 286 209 287 14 287 box* %(14, 286)(195, 1)
14 287 15 287 15 320 14 320 box* %(14, 287)(1, 33)
/Courier 7 13 17 302 (7) text*
/Courier 14 13 24 302 (: ) text*
/Courier-BoldOblique 7 13 38 302 (s) text*
17 302 206 302 206 303 17 303 box* %(17, 302)(189, 1)
/Courier 189 13 17 318 (\(struct Student *\) 0x4052a0) text*
208 287 209 287 209 320 208 320 box* %(208, 287)(1, 33)
14 320 209 320 209 321 14 321 box* %(14, 320)(195, 1)
209 287 210 287 210 321 209 321 box* %(209, 287)(1, 34)
15 321 210 321 210 322 15 322 box* %(15, 321)(195, 1)
282 285 454 285 454 324 282 324 clean*
282 285 453 285 453 286 282 286 box* %(282, 285)(171, 1)
282 286 283 286 283 322 282 322 box* %(282, 286)(1, 36)
285 288 450 288 450 289 285 289 box* %(285, 288)(165, 1)
285 289 286 289 286 319 285 319 box* %(285, 289)(1, 30)
/Courier 28 13 300 304 (name) text*
/Courier 21 13 328 304 ( = ) text*
/Courier 98 13 349 304 (0x402038 \"cam\") text*
/Courier 21 13 300 317 (age) text*
/Courier 21 13 328 317 ( = ) text*
/Courier 14 13 349 317 (23) text*
449 289 450 289 450 319 449 319 box* %(449, 289)(1, 30)
285 319 450 319 450 320 285 320 box* %(285, 319)(165, 1)
452 286 453 286 453 322 452 322 box* %(452, 286)(1, 36)
282 322 453 322 453 323 282 323 box* %(282, 322)(171, 1)
453 286 454 286 454 323 453 323 box* %(453, 286)(1, 37)
283 323 454 323 454 324 283 324 box* %(283, 323)(171, 1)
%%Trailer
% $Id$
% Trailer for DDD PostScript Box output
grestore
showpage
end		% of ddddict 
%%Trailer
cleartomark
countdictstack
exch sub { end } repeat
restore
%%EOF
